import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiohttp import web  # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render

# üîë –¢–æ–∫–µ–Ω –±–µ—Ä–µ –∑ Environment Variables
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π –≤ Environment Variables!")

# üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# üé® –ö–æ–ª—å–æ—Ä–∏ —ñ —Å—Ç–∏–ª—å
GOLD_EMOJI = "‚ú®"
BOLD = lambda text: f"<b>{text}</b>"
ITALIC = lambda text: f"<i>{text}</i>"

# üèÅ /start –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def start_message(message: types.Message):
    text = (
        f"{GOLD_EMOJI} {BOLD('–í—ñ—Ç–∞—é!')} \n\n"
        "–†–∞–¥–∏–π –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ —Ç—É—Ç.\n"
        "–¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç—É –∑ –≤–∏—Ç—Ä–∏–º–∞–Ω–∏–º —Ç–µ–º–Ω–∏–º —Å—Ç–∏–ª–µ–º —ñ –Ω–æ—Ç–∫–∞–º–∏ –∑–æ–ª–æ—Ç–∞ üí´\n\n"
        f"{ITALIC('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:')}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://—Ç–≤—ñ–π_—Å–∞–π—Ç.com")],
        [InlineKeyboardButton(text="üíé –ê–∫—Ü—ñ—ó", url="https://—Ç–≤—ñ–π_—Å–∞–π—Ç.com/promo")],
        [InlineKeyboardButton(text="üì¨ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", callback_data="subscribe")]
    ])

    await message.answer(text, reply_markup=keyboard)

# üì© –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"
@dp.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: types.CallbackQuery):
    await callback.answer("–î—è–∫—É—î–º–æ! –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è üíõ", show_alert=True)

# === Webhook —á–∞—Å—Ç–∏–Ω–∞ ===
async def on_startup(app):
    webhook_url = f"{os.getenv('RENDER_EXTERNAL_URL')}/webhook/{TOKEN}"
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def handle_webhook(request):
    update = types.Update.model_validate(await request.json(), strict=False)
    await dp.feed_update(bot, update)
    return web.Response(status=200)

def main():
    app = web.Application()
    app.router.add_post(f"/webhook/{TOKEN}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", 5000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
