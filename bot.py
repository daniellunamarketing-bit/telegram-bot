import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    MenuButtonWebApp,
    WebAppInfo
)
from aiogram.filters import Command
from aiohttp import web

# =======================
# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
# =======================
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É Environment Variables!")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# =======================
# üîπ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
# =======================
SUBSCRIBERS_FILE = "subscribers.json"

def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(json.load(f))
    except:
        return set()

def save_subscribers(subs):
    with open(SUBSCRIBERS_FILE, "w") as f:
        json.dump(list(subs), f)

subscribers = load_subscribers()

# =======================
# üîπ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
# =======================
GOLD = "‚ú®"
BOLD = lambda t: f"<b>{t}</b>"
ITALIC = lambda t: f"<i>{t}</i>"

# =======================
# üîπ –ö–æ–º–∞–Ω–¥–∏
# =======================

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    text = (
        f"{GOLD} {BOLD('–í—ñ—Ç–∞—é —É VIP Advisor!')}\n\n"
        "üí´ –ú–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ —Ç–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º –≤—ñ–¥ –≥—Ä–∏.\n"
        f"{ITALIC('–û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ:')}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ê–∫—Ü—ñ—ó", url="https://yourvipadvisor.com/promo")],
        [InlineKeyboardButton(text="üî• VIP –ü—Ä–æ–≥—Ä–∞–º–∞", url="https://yourvipadvisor.com/vip")],
        [InlineKeyboardButton(text="üì© –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", callback_data="subscribe")]
    ])

    await message.answer(text, reply_markup=keyboard)


@dp.message(Command("info"))
async def info_cmd(message: types.Message):
    text = (
        f"‚ÑπÔ∏è {BOLD('–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç')}\n\n"
        "–ú–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ VIP Advisor.\n"
        "üé∞ –°–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—å –Ω–∞ –±–æ–Ω—É—Å–∞—Ö, –∞–∫—Ü—ñ—è—Ö —ñ VIP-–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è—Ö —É –≥—Ä–∞–ª—å–Ω—ñ–π —Å—Ñ–µ—Ä—ñ.\n\n"
        f"{ITALIC('–ü—ñ–¥–ø–∏—Å—É–π—Å—è, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!')}"
    )
    await message.answer(text)


@dp.message(Command("promo"))
async def promo_cmd(message: types.Message):
    text = (
        f"üíé {BOLD('–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó:')}\n\n"
        "üî• 100% –±–æ–Ω—É—Å –Ω–∞ –ø–µ—Ä—à–∏–π –¥–µ–ø–æ–∑–∏—Ç\n"
        "üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞\n"
        "üí∞ –ö–µ—à–±–µ–∫ –¥–æ 15%\n\n"
        f"üëâ –î–µ—Ç–∞–ª—ñ: https://yourvipadvisor.com/promo"
    )
    await message.answer(text)


@dp.message(Command("vip"))
async def vip_cmd(message: types.Message):
    text = (
        f"üëë {BOLD('VIP –ö–ª—É–±')}\n\n"
        "üíº –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –±–æ–Ω—É—Å–∏\n"
        "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏ –¥–æ —Å–≤—è—Ç\n"
        "üìû –ü—Ä–∏–≤–∞—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7\n\n"
        f"–ü—Ä–∏—î–¥–Ω—É–π—Å—è: https://yourvipadvisor.com/vip"
    )
    await message.answer(text)

# =======================
# üîπ Callback: –ü—ñ–¥–ø–∏—Å–∫–∞
# =======================
@dp.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    subscribers.add(user_id)
    save_subscribers(subscribers)
    await callback.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è üíõ", show_alert=True)

# =======================
# üîπ –ö–æ–º–∞–Ω–¥–∞ /broadcast (–∞–¥–º—ñ–Ω)
# =======================
ADMIN_ID = 123456789  # üëà –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π Telegram user ID

@dp.message(Command("broadcast"))
async def broadcast(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
    
    if " " not in message.text:
        return await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /broadcast —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    text = message.text.split(" ", 1)[1]
    sent = 0
    for uid in list(subscribers):
        try:
            await bot.send_message(uid, text)
            sent += 1
        except:
            pass

    await message.answer(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ {sent} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

# =======================
# üîπ Webhook –ª–æ–≥—ñ–∫–∞
# =======================
async def on_startup(app):
    webhook_url = f"{os.getenv('RENDER_EXTERNAL_URL')}/webhook/{TOKEN}"
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

    # –ö–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="info", description="–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç"),
        BotCommand(command="promo", description="–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó"),
        BotCommand(command="vip", description="VIP –ø—Ä–æ–≥—Ä–∞–º–∞"),
    ]
    await bot.set_my_commands(commands)

    # üß© –ö–Ω–æ–ø–∫–∞ "Casinos" –±—ñ–ª—è –ø–æ–ª—è –≤–≤–æ–¥—É
    webapp = WebAppInfo(url="https://yourvipadvisor.com/casinos")
    menu_button = MenuButtonWebApp(text="üé∞ Casinos", web_app=webapp)

    # ‚úÖ –¢—É—Ç –≤–∞–∂–ª–∏–≤–æ ‚Äî —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ chat_id=None
    await bot.set_chat_menu_button(chat_id=None, menu_button=menu_button)

    print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Casinos' –¥–æ–¥–∞–Ω–∞ —É –º–µ–Ω—é")


async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()


async def handle_webhook(request):
    update = types.Update.model_validate(await request.json(), strict=False)
    await dp.feed_update(bot, update)
    return web.Response(status=200)


def main():
    app = web.Application()
    app.router.add_post(f"/webhook/{TOKEN}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    port = int(os.getenv("PORT", 5000))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()
